<!-- colorScaleOverlay.ejs -->

<%
// Helper function to format numbers in different scales
function formatNumberWithScale(number) {
  const scales = ['', ' Thousand', ' Million', ' Billion', ' Trillion'];

  for (let i = 0; i < scales.length; i++) {
    const divider = Math.pow(1000, i);
    if (number < Math.pow(1000, i + 1)) {
      return (number / divider).toFixed(2) + scales[i];
    }
  }

  return number.toLocaleString();
}
%>

<style>
  #color-scale-container {
    position: fixed;
    top: 10px;
    left: calc(100% - 70px);
    height: 200px;
    width: 20px;
  }

  #color-scale-overlay {
    position: relative;
    height: 100%;
    background: linear-gradient(to bottom, <%= range.map((color, i) => color + ' ' + (i * (100 / (range.length - 1))) + '%').join(', ') %>);
    border-right: 1px solid #aaa;
    border-radius: 5px;
  }

  .color-legend {
    position: absolute;
    color: black;
    font-size: 12px;
    text-align: center;
    width: 40px; /* Adjust width as needed */
  }

  <% range.forEach((color, i) => { %>
    .color-legend<%= i %> {
      left: calc(100% - 60px); /* Adjust left position as needed */
      top: <%= i * (186 / (range.length - 1)) %>px; /* Adjust top position as needed */
    }
  <% }); %>
</style>

<div id="color-scale-container">
  <div id="color-scale-overlay"></div>
  <% range.forEach((color, i) => { %>
  <div class="color-legend color-legend<%= i %>">
    <%= formatNumberWithScale(domain[i]) %>
  </div>
  <% }); %>
</div>
